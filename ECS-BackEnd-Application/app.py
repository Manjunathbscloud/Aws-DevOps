from flask import Flask, request, abort
from werkzeug.exceptions import HTTPException

app = Flask(__name__)

@app.route('/path1', methods=['GET'])
def path1():
    request_details = f"Request method: {request.method}, Path: {request.path}, Headers: {request.headers}"
    response_text = (
        "This is response from path1.\n"
        "This response generated by Docker container which is running in AWS ECS service. \n"
        "below are the Request details:\n"
        f"{request_details}"
    )
    return response_text

@app.route('/path2', methods=['GET'])
def path2():
    request_details = f"Request method: {request.method}, Path: {request.path}, Headers: {request.headers}"
    response_text = (
        "This is response from path2.\n"
        "This response generated by Docker container which is running in AWS ECS service. \n"
        "below are the Request details:\n"
        f"{request_details}"
    )
    return response_text
# Custom error handler for 404 Not Found errors
@app.errorhandler(404)
def page_not_found(error):
    request_details = f"Request method: {request.method}, Path: {request.path}, Headers: {request.headers}"
    response_text = (
        "This is method or/and path off the request is not available.\n"
        f"{request_details}"
    )
    return response_text

# Custom error handler for any other HTTPException
@app.errorhandler(HTTPException)
def handle_exception(e):
    return str(e), e.code

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8000)
